---
version: 2.1

orbs:
  win: circleci/windows@2.2.0
  npm-release-management: salesforce/npm-release-management@3.4.1

parameters:
  fingerprint:
    type: string
    default: '1e:57:e5:df:0e:82:aa:ff:33:b7:8c:0f:9c:28:56:f3'
  publish:
    type: boolean
    default: false
  publish-type:
    type: string
    default: minor

commands:
  gh-config:
    parameters:
      cache_timeout:
        description: 'Cache timeout in seconds'
        type: integer
        default: 120
      gh_email:
        description: 'GitHub email'
        type: string
        default: $GH_EMAIL
      gh_username:
        description: 'GitHub username'
        type: string
        default: 'Release Bot'
    steps:
      - run:
          name: 'Configuring GitHub'
          command: |
            git config --global credential.helper 'cache --timeout=<< parameters.cache_timeout >>'
            git config --global user.email "<< parameters.gh_email >>"
            git config --global user.name "<< parameters.gh_username >>"

  setup-publish:
    description: 'Configure GitHub, Checkout, Install, Bump Package Version, Build'
    steps:
      - gh-config
      - checkout
      - restore_cache:
          keys:
            - v2-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
            - v2-npm-{{checksum ".circleci/config.yml"}}
      - run:
          name: Install dependencies
          command: |
            yarn --version
            node --version
            yarn
      - run:
          name: Bump package version
          command: |
            npx lerna version << pipeline.parameters.publish-type >> --force-publish --no-git-tag-version --exact --yes
            git add .
            export RELEASE_TAG="$(node -pe "require('./lerna.json').version")"
            git commit --allow-empty -m "chore: updated version $RELEASE_TAG [ci skip]"
      - run:
          name: Build project
          command: yarn build
      - run:
          name: Generate plugin manifest
          command: yarn manifest:generate
      - run:
          name: Pack Library
          working_directory: ./packages/templates
          command: npm pack

  ssh-config:
    steps:
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.fingerprint >>
      - run: ssh-keyscan -H github.com >> ~/.ssh/known_hosts

  create-git-tag:
    steps:
      - gh-config
      - run:
          name: Current git tags
          command: git tag
      - run:
          name: Create new git tag
          command: |
            PKG_TAG="v$(cat package.json | jq -r .version)"
            git tag -a $PKG_TAG -m "Releasing ${PKG_TAG}"
            git push origin $PKG_TAG

jobs:
  node-latest: &test
    docker:
      - image: node:latest
    working_directory: ~/cli
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v2-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
            - v2-npm-{{checksum ".circleci/config.yml"}}
      - run:
          name: Install dependencies
          command: yarn
      - run:
          name: Build plugin
          command: yarn build
      - run:
          name: Lint source files
          command: yarn lint
      - run:
          name: Testing
          command: yarn test
  node-14:
    <<: *test
    docker:
      - image: node:14
  node-16:
    <<: *test
    docker:
      - image: node:16
  cache:
    <<: *test
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: v2-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - ~/cli/node_modules
            - /usr/local/share/.cache/yarn
            - /usr/local/share/.config/yarn

  run-win-tests:
    description: 'Run tests on Windows'
    executor: win/default
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
            # if cache for exact version of 'package.json' is not present, then load the most recent cache
            - dependency-cache-win1-
      - run:
          name: 'Install dependencies'
          command: |
            yarn --version
            node --version
            yarn
      - save_cache:
          key: dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - node_modules
      - run:
          name: 'Compile'
          command: |
            yarn build
      - run:
          name: 'Running unit tests'
          command: |
            yarn test

  prepublish:
    description: 'Prepublish'
    working_directory: ~/cli
    docker:
      - image: node:14
    steps:
      - setup-publish
      - persist_to_workspace:
          root: .
          paths:
            - .git
            - packages/templates/package.json
            - packages/templates/*.tgz
            - packages/plugin-templates/.gitignore
            - packages/plugin-templates/package.json
            - packages/plugin-templates/README.md
            - packages/plugin-templates/yarn.lock
            - packages/plugin-templates/messages
            - packages/plugin-templates/lib
            - packages/plugin-templates/bin
            - packages/plugin-templates/oclif.manifest.json

  publish-library:
    description: 'Publish library package'
    docker:
      - image: node:14
    working_directory: ~/cli/packages/templates
    steps:
      - attach_workspace:
          at: ~/cli
      - run:
          name: Set .npmrc
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Publish to NPM
          command: |
            RELEASE_VERSION="$(node -pe "require('./package.json').version")"
            TARFILE=$(ls | grep $RELEASE_VERSION.tgz)
            echo "publishing to npm using ${TARFILE}"
            npm publish $TARFILE --access public

  publish-plugin:
    description: 'Publish plugin package'
    working_directory: ~/cli/packages/plugin-templates
    docker:
      - image: node:14
    steps:
      - attach_workspace:
          at: ~/cli
      - npm-release-management/sign
      - npm-release-management/publish:
          use_tarfile: true
      - ssh-config
      - create-git-tag # this is looking up package.json
      - run: git push origin main
      - run:
          name: Wait for version to become available on NPM registry
          command: |
            PKG_NAME=$(cat package.json | jq -r .name)
            PKG_VERSION=$(cat package.json | jq -r .version)
            MAX_TRIES=30
            TRIES=0
            until (( $(curl -s 'https://registry.npmjs.org/'$PKG_NAME | jq '.["versions"]["'$PKG_VERSION'"]' | grep -c $PKG_VERSION ) )) || (($TRIES >= $MAX_TRIES )); do
                printf '.'
                sleep 1
                TRIES=$((TRIES+1))
            done
            if (($TRIES >= $MAX_TRIES)); then
                echo "Timeout waiting for tag. Exiting job"
                exit 1
            fi
      - npm-release-management/verify-signed-package

workflows:
  version: 2.1

  commit-workflow:
    jobs:
      - node-latest
      - node-14
      - node-16
      - cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore:
                - /.*/
                - main
      - run-win-tests
      - prepublish:
          context: IEAT_keys
          requires:
            - run-win-tests
            - node-latest
            - node-14
            - node-16
          filters:
            branches:
              only: main
      - hold: # Requires manual approval in Circle Ci
          type: approval
          filters:
            branches:
              only: main
      - publish-library:
          context: IEAT_keys
          filters:
            branches:
              only: main
          requires:
            - prepublish
            - hold
      - publish-plugin:
          context:
            - IEAT_keys
            - AWS
          filters:
            branches:
              only: main
          requires:
            - publish-library
